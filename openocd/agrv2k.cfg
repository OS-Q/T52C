set _ADAPTER jlink
set _ADAPTER_SPEED_HI 15000
set _ADAPTER_SPEED_LO 2000
set _TRANSPORT swd

if { [info exists ADAPTER] } {
  set _ADAPTER $ADAPTER
}

if { [info exists ADAPTER_SPEED] } {
  set _ADAPTER_SPEED_HI $ADAPTER_SPEED
}
if { $_ADAPTER == "cmsis-dap" || $_ADAPTER_SPEED_LO > $_ADAPTER_SPEED_HI } {
  set _ADAPTER_SPEED_LO $_ADAPTER_SPEED_HI
}

if { [info exists TRANSPORT] } {
  set _TRANSPORT $TRANSPORT
}
puts stderr "Info : Using speed $_ADAPTER_SPEED_HI KHz"

if { ! [info exists JTAG_PRE_CHAIN] } {
  set JTAG_PRE_CHAIN {}
}
if { ! [info exists JTAG_POST_CHAIN] } {
  set JTAG_POST_CHAIN {}
}

source [find interface/$_ADAPTER.cfg]
if { $_ADAPTER == "cmsis-dap" && $_TRANSPORT == "jtag" } {
  eval cmsis_dap_jtag_configure $JTAG_PRE_CHAIN 4 $JTAG_POST_CHAIN
  cmsis_dap_jtag_index [llength $JTAG_PRE_CHAIN]
  set _TRANSPORT swd; # DAP will still operate in JTAG mode
}
set _TRANSPORT [string tolower $_TRANSPORT]
transport select $_TRANSPORT
adapter speed $_ADAPTER_SPEED_LO
if { [info exists ADAPTER_SERIAL] } {
  adapter serial $ADAPTER_SERIAL
}

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

set _CHIPNAME agrv2k
set _WORKAREASIZE 0x10000
set _FLASH_SIZE 0
set _TARGETNAME cpu
set _ENDIAN little

if { [info exists CHIPNAME] } {
  set _CHIPNAME $CHIPNAME
}

if { [info exists WORKAREASIZE] } {
  set _WORKAREASIZE $WORKAREASIZE
}

if { [info exists FLASH_SIZE] } {
  set _FLASH_SIZE $FLASH_SIZE
}

set _chain_idx 0
if { $_TRANSPORT == "jtag" } {
  foreach irlen $JTAG_PRE_CHAIN {
    jtag newtap "auto$_chain_idx" tap -irlen $irlen
    incr _chain_idx
  }
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if { $_TRANSPORT == "jtag" } {
  foreach irlen $JTAG_POST_CHAIN {
    jtag newtap "auto$_chain_idx" tap -irlen $irlen
    incr _chain_idx
  }
}

target create $_TARGETNAME riscv -endian $_ENDIAN -dap $_CHIPNAME.dap
$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE

riscv set_enable_virt2phys off
riscv set_mem_access sysbus progbuf

# Hide CSRs that are not supported or rarely used.
riscv hide_csrs 7,21,23
riscv hide_csrs 65-767
riscv hide_csrs 774-831
riscv hide_csrs 837-1951
riscv hide_csrs 1955-1967
riscv hide_csrs 1971-2815
riscv hide_csrs 2819-2937
riscv hide_csrs 2947-4095

flash bank $_CHIPNAME.FLASH agrv 0x80000000 $_FLASH_SIZE 0 0 $_TARGETNAME
flash bank $_CHIPNAME.ROM   agrv 0x00010000 0x2000       0 0 $_TARGETNAME

proc adapter_speed_hi {} {
  set clk_source [expr {[mrw 0x0300000C] & 0x3}]
  if { $clk_source == 0 } {
    mmw 0x03000018 0xf 0; # Set HSI to fastest
    adapter speed $::_ADAPTER_SPEED_HI
  }
}

$_TARGETNAME configure -event examine-end {
  halt
  # DBG_CNTL |= SYS_DBG_IWDG_STOP | SYS_DBG_STANDBY | SYS_DBG_STOP
  mmw 0x0300001c 0xf 0
}

# Connect with NRST pin asserted. Can be used when there is a clock failure in cpu.
if  { [info exists CONNECT_UNDER_RESET] } {
  reset_config connect_assert_srst srst_only srst_nogate
  $_TARGETNAME configure -event examine-start {
    $::_CHIPNAME.dap apreg 0 0x4 0x40
    $::_CHIPNAME.dap apreg 0 0xc 0x1
    $::_CHIPNAME.dap apreg 0 0xc 0x9
    adapter deassert srst
    $::_CHIPNAME.dap apreg 0 0xc 0x5
  }
}

$_TARGETNAME configure -event reset-start {
  adapter speed $::_ADAPTER_SPEED_LO
}

$_TARGETNAME configure -event reset-init {
  adapter_speed_hi
}

$_TARGETNAME configure -event gdb-attach {
  halt
  adapter speed $::_ADAPTER_SPEED_LO
  poll on
}

$_TARGETNAME configure -event gdb-detach {
  poll off
}

set APREG {}
proc apc {{value {}}} {
  if { $value == {} } {
    $::_CHIPNAME.dap apreg 0 0; # Read
  } else {
    $::_CHIPNAME.dap apreg 0 0 $value; # Write
    $::_CHIPNAME.dap apreg 0 0; # Read
  }
}

proc apa {{reg {}}} {
  if { $reg == {} } {
    set ap_read [$::_CHIPNAME.dap apreg 0 4]
    set ::APREG [format 0x%x [expr {[lindex [split $ap_read] 0] / 4}]]
  } else {
    set ::APREG $reg
    $::_CHIPNAME.dap apreg 0 4 [expr {$reg * 4}]
  }
  echo "Current DM address in AP: $::APREG"
}

proc apd {{data {}}} {
  if { $data == {} } {
    echo "AP Data read from DM address $::APREG: "
    echo [$::_CHIPNAME.dap apreg 0 12]
  } else {
    echo "AP Data written to DM address $::APREG: $data"
    $::_CHIPNAME.dap apreg 0 12 $data
  }
}

proc ap_reg {{reg {}} {data {}}} {
  apa $reg
  # Use - to prevent the auto data read
  if { $data != "-" } {
    apd $data
  }
}

alias ap_data0      ap_reg 0x04
alias ap_dmcontrol  ap_reg 0x10
alias ap_dmstatus   ap_reg 0x11
alias ap_hartinfo   ap_reg 0x12
alias ap_abstractcs ap_reg 0x16
alias ap_command    ap_reg 0x17
alias ap_sbcs       ap_reg 0x38
alias ap_sbaddr     ap_reg 0x39
alias ap_sbdata     ap_reg 0x3c
alias ap_data0      ap_reg 0x04
alias ap_progbuf0   ap_reg 0x20

proc rtt_start {} {
  rtt setup 0x20000000 0x20000 "SEGGER RTT"
  rtt start
  rtt server start 19021 0
  rtt polling_interval 10
}

proc rtt_restart {} {
  rtt stop
  rtt start
}

proc is_read_protected {} {
  set option_bytes [agrv options_read]
  return [expr {[string first "read protection: on" $option_bytes] >= 0}]
}

proc flash_size {} {
  flash probe 0
  set flash_banks [split [flash banks] "\n\r"]
  foreach flash_bank $flash_banks {
    if { [string first "agrv2k.FLASH" $flash_bank] } {
      set bank_info [split $flash_bank ":,"]
      set bank_size [split [string trim [lindex $bank_info 2]] " "]
      set flash_size [expr [lindex $bank_size 1]]
      return $flash_size
    }
  }
  return 0
}

#telnet_port 4444
gdb_report_data_abort enable

if { [info exists AGRV_PROGRESS] } {
  agrv progress $AGRV_PROGRESS
}

if { [info exists ADAPTER_OFFLINE] } {
  adapter init
  return
}

proc check_device_id { device_id } {
  if { [is_read_protected] } {
    error "Device is in read protect mode, unlock it first" 1
  }

  set DEVICE_ID_ [read_memory 0x03000100 32 1]
  set FLASH_SIZE [flash_size]
  if { $FLASH_SIZE > 0} {
    if { [string first ":" $device_id] >= 0 } {
      set DEVICE_ID0_ [format "0X%04x:%dKB" $DEVICE_ID_ [expr $FLASH_SIZE/1024]]
    } else {
      set DEVICE_ID0_ [format "0X%04x" $DEVICE_ID_]
    }
    if { $DEVICE_ID0_ != [string toupper $device_id] } {
      error "Device ID does not match, expected $device_id but got $DEVICE_ID0_" 1
    }
  }
}

proc check_logic { {logic_config ""} {logic_bin ""} } {
  if { [is_read_protected] } {
    error "Device is in read protect mode, unlock it first" 1
  }

  set DEVICE_ID_ [read_memory 0x03000100 32 1]

  # Set clock to HSI to ensure that flash is read correctly
  set clk_ctrl [mrw 0x0300000C]
  mww 0x0300000C [expr {$clk_ctrl & ~0x3}]

  set inc_path [file dirname [info script]]
  set inc_file [file join $inc_path "agrv_fpga_decomp.inc"] 
  set inc_fp [open $inc_file r]
  set inc_lines [split [read $inc_fp] "\n"]
  close $inc_fp
 
  set byte_count 0
  foreach line $inc_lines {
    set line [string trim $line]
    if { [string first "/*" $line] == 0 } {
      continue
    }
    foreach word [split $line " ,"] {
      if { $word != "" } {
        incr byte_count
      }
    }
  }

  set LOGIC_ALGO_SIZE_ [expr { ($byte_count + 8 + 255) & ~255}]
  set LOGIC_COMPRESSED_ false
  set ADDR_ [read_memory 0x81000030 32 2]
  if { [expr { [lindex $ADDR_ 0] + [lindex $ADDR_ 1] != 0xffffffff }] } {
    set ADDR_ [read_memory 0x81000038 32 2]
    set LOGIC_COMPRESSED_ true
  }
  if { [expr { [lindex $ADDR_ 0] + [lindex $ADDR_ 1] != 0xffffffff }] } {
    error "No valid logic configuration address is found" 1
  }
  set LOGIC_CONFIG_ [lindex $ADDR_ 0]
  if { $LOGIC_COMPRESSED_ } {
    set LOGIC_CONFIG_ [format 0x%x [expr { $LOGIC_CONFIG_ - $LOGIC_ALGO_SIZE_ }]]
  }

  if { $logic_config == "" || $logic_config == 0x00000000 } {
    set logic_config $LOGIC_CONFIG_ 
  } elseif { $logic_config != $LOGIC_CONFIG_} {
    error "Logic configuration address does not match, [format "0X%08x" $logic_config] expected but got [format "0X%08x" $LOGIC_CONFIG_]" 1
  }
  puts stderr "Info : Checking logic configuration at $logic_config"

  if { $LOGIC_COMPRESSED_ } {
    set LOGIC_CONFIG_ [format 0x%x [expr { $LOGIC_CONFIG_ + $LOGIC_ALGO_SIZE_ }]]
  }
  set LOGIC_ID_ [read_memory $LOGIC_CONFIG_ 8 4]; # In big endian
  if { [expr { (($DEVICE_ID_ >> 24) & 0xff) != [lindex $LOGIC_ID_ 0] ||
               (($DEVICE_ID_ >> 16) & 0xff) != [lindex $LOGIC_ID_ 1] ||
               (($DEVICE_ID_ >>  8) & 0xff) != [lindex $LOGIC_ID_ 2] ||
               (($DEVICE_ID_ >>  0) & 0xff) != [lindex $LOGIC_ID_ 3] }] } {
    error "No valid logic configuration found at address $logic_config" 1
  }

  # Verify logic BIN
  if { $logic_bin != "" && [file exists $logic_bin] && [file size $logic_bin] > 0 } {
    puts stderr "Info : Checking logic configuration with image file $logic_bin"
    # Ignore last word in non-compressed bin or checksum will always pass
    set MAX_SIZE [expr {$LOGIC_COMPRESSED_ ? 0 : [file size $logic_bin] - 4}]
    if { [catch {verify_image_checksum $logic_bin $LOGIC_CONFIG_ $MAX_SIZE bin} err] } {
      error "Device logic configuration does not match with image file $logic_bin" 1
    }
  }
  mww 0x0300000C $clk_ctrl
}

init
poll off
